datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String?   @unique
  password             String?   @db.VarChar(64)
  role                 UserRole
  name                 String?
  emiratesId           String?   @db.VarChar(15)
  emiratesIdPhoto      String?
  zone                 Emirates?
  gender               Gender?
  phone                String?
  centerId             Int?
  center               Center?   @relation(fields: [centerId], references: [id], name: "CenterEmployees")
  bankName             String?
  bankUserName         String?
  commitment String?
  ibanBank             String?   @unique @db.VarChar(34)
  ibanBankPhoto        String?
  graduationName       String?
  graduationImage      String?
  passportNumber       String?   @unique
  passportPhoto        String?
  bankApprovalAttachment String?
  cvImage           String?
  photo                String?
  signature            String?
  isActive             Boolean   @default(true)
  rating               Float?    @default(0)
  dutyId               Int?
  duty                 Duty?     @relation(fields: [dutyId], references: [id])
  attendance           Attendance[]
  dutyRewards          DutyReward[]
  additionalDuties     UserAdditionalDuties[]
  dayAttendances       DayAttendance[]
  centerAdmin          Center?   @relation("CenterAdmin")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastRatingDate     DateTime?
  totalRating          Float?
  totalScore Int?
  totalPoints Int?
  deletedAt            DateTime?
  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?
  emailConfirmed       Boolean   @default(true)
  accountStatus        AccountStatus @default(APPROVED)
  rejectedReason       String?
  logs                 Log[]
}
model UserAdditionalDuties {
  userId Int
  dutyId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  duty Duty @relation(fields: [dutyId], references: [id], onDelete: Cascade)
  @@id([userId, dutyId])
}
model Log {
  id           Int       @id @default(autoincrement())
  userId       Int
  action       String?
  description  String     @db.Text
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
}

model Center {
  id             Int           @id @default(autoincrement())
  name           String
  centerId       String        @unique
  zone           Emirates?
  email          String
  supervisorEmail String
  siteSupervisor  String?
  employees      User[]        @relation("CenterEmployees")
  attendance     Attendance[]
  studentAttendances   StudentAttendance[]
  dayAttendances DayAttendance[]
  adminUserId    Int?          @unique
  centerAdmin    User?         @relation(fields: [adminUserId], references: [id], name: "CenterAdmin")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
}

model Shift {
  id            Int           @id @default(autoincrement())
  name          String
  duration      Int           // Duration in hours
  rewards       DutyReward[]
  attendance    Attendance[]
  archived      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  deletedAt     DateTime?
}

model Duty {
  id                Int                 @id @default(autoincrement())
  name              String
  rewards           DutyReward[]
  amount            Float
  additionalUsers   UserAdditionalDuties[]  // Relation to UserAdditionalDuties
  users             User[]
  archived          Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  deletedAt         DateTime?
  assignments DutyAssignments[] // New relation to the explicit join table
}

model DayAttendance {
  id              Int                 @id @default(autoincrement())
  userId          Int
  centerId        Int
  date            DateTime
  examType        String?
  totalReward     Float?
  isPaid          Boolean             @default(false)
  attachment      String?
  user            User                @relation(fields: [userId], references: [id])
  center          Center              @relation(fields: [centerId], references: [id])
  attendances     Attendance[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
  deletedAt       DateTime?
  userAssignment  UserAssignment?     @relation("DayAttendanceAssignment") // New relation to UserAssignment
}

model Assignment {
  id              Int                 @id @default(autoincrement())
  title           String
  questions       Question[]          // List of questions in the assignment
  duties      DutyAssignments[] // New relation to the explicit join table
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
}
model DutyAssignments {
  dutyId      Int
  assignmentId Int
  duty        Duty              @relation(fields: [dutyId], references: [id])
  assignment  Assignment         @relation(fields: [assignmentId], references: [id])

  @@id([dutyId, assignmentId])   // Composite primary key
}
model Question {
  id              Int                 @id @default(autoincrement())
  title           String
  choices         Choice[]            // List of choices for the question
  totalPoints     Int                 // Total points for the question
  assignmentId    Int
  assignment      Assignment          @relation(fields: [assignmentId], references: [id])
  questionAnswers QuestionAnswer[]
  isArchived    Boolean @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
}

model Choice {
  id              Int                 @id @default(autoincrement())
  text            String              // Choice text
  points          Int                 // Points associated with this choice
  questionId      Int
  question        Question            @relation(fields: [questionId], references: [id])
  questionAnswers QuestionAnswer[]    // Add the relation to QuestionAnswer here
  isArchived      Boolean             @default(false) // Add isArchived field
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
  deletedAt       DateTime?
}


model UserAssignment {
  id              Int                 @id @default(autoincrement())
  dayAttendanceId Int                 @unique  // Make this unique to ensure one-to-one relation
  totalRating     Float
  totalScore Int
  totalPoints Int
  comments        String?             // Optional comments from the user
  dayAttendance   DayAttendance       @relation(fields: [dayAttendanceId], references: [id], name: "DayAttendanceAssignment")
  questionAnswers QuestionAnswer[]    // Links each question in the assignment with the selected choice
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
}

model QuestionAnswer {
  id              Int                 @id @default(autoincrement())
  userAssignmentId Int                // Reference to UserAssignment
  questionId      Int                 // Reference to the question
  choiceId        Int                 // Selected choice
  comment         String?             // Optional comment for the question
  userAssignment  UserAssignment      @relation(fields: [userAssignmentId], references: [id])
  question        Question            @relation(fields: [questionId], references: [id])
  choice          Choice              @relation(fields: [choiceId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
}

model PageAvailability {
  id        Int        @id @default(autoincrement())
  page      PageName   @unique
  status    PageStatus @default(CLOSED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum PageName {
  REGISTER
}

enum PageStatus {
  OPEN
  CLOSED
}

model StudentAttendance {
  id        Int      @id @default(autoincrement())
  centerId  Int
  date      DateTime
  examType  ExamType
  totalAttendedStudents Int
  center    Center   @relation(fields: [centerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?

  @@unique([centerId, examType, date])
}
model DutyReward {
  id           Int           @id @default(autoincrement())
  dutyId       Int
  shiftId      Int
  amount       Float
  isPaid       Boolean       @default(false)
  date         DateTime      @default(now())
  duty         Duty          @relation(fields: [dutyId], references: [id])
  shift        Shift         @relation(fields: [shiftId], references: [id])
  attendanceId Int
  userId       Int
  attendance   Attendance    @relation(fields: [attendanceId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model Attendance {
  id              Int           @id @default(autoincrement())
  userId          Int
  centerId        Int
  shiftId         Int
  date            DateTime
  user            User          @relation(fields: [userId], references: [id])
  center          Center        @relation(fields: [centerId], references: [id])
  shift           Shift         @relation(fields: [shiftId], references: [id])
  dutyRewards     DutyReward[]
  dayAttendanceId Int?
  dayAttendance   DayAttendance? @relation(fields: [dayAttendanceId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  deletedAt       DateTime?
  @@unique([userId, shiftId, date])
}

model Calendar {
  id           Int           @id @default(autoincrement())
  date         DateTime
  examType     ExamType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}


enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CENTER
  FINANCIAL_AUDITOR
}

enum ExamType {
  TEACHER
  GRADUATE
}

enum AccountStatus {
  PENDING
  UNCOMPLETED
  APPROVED
  REJECTED
}

enum Emirates {
  ABU_DHABI
  AJMAN
  DUBAI
  FUJAIRAH
  RAS_AL_KHAIMAH
  SHARJAH
  UMM_AL_QUWAIN
  AIN
}
