datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String?   @unique
  password             String?
  role                 UserRole
  name                 String?
  emiratesId           String?
  emiratesIdPhoto      String?
  zone                 String?
  gender               Gender?
  phone                String?
  centerId             Int?
  center               Center?   @relation(fields: [centerId], references: [id], name: "CenterEmployees")
  bankName             String?
  bankUserName         String?
  ibanBank             String?   @unique
  ibanBankPhoto        String?
  graduationName       String?
  graduationImage      String?
  passportNumber       String?   @unique
  passportPhoto        String?
  photo                String?
  isActive             Boolean   @default(true)
  rating               Float?    @default(0)
  dutyId               Int?
  duty                 Duty?     @relation(fields: [dutyId], references: [id])
  attendance           Attendance[]
  centerAdmin          Center?   @relation("CenterAdmin")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?
  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?
  emailConfirmed       Boolean   @default(false)
  accountStatus        AccountStatus @default(APPROVED)
  rejectedReason       String?
}

model Center {
  id             Int           @id @default(autoincrement())
  name           String
  centerId       String        @unique
  zone           String
  email          String
  supervisorEmail String
  employees      User[]        @relation("CenterEmployees")
  centerShifts   CenterShift[]
  attendance     Attendance[]
  adminUserId    Int?          @unique
  centerAdmin    User?         @relation(fields: [adminUserId], references: [id], name: "CenterAdmin")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
}

model Shift {
  id            Int           @id @default(autoincrement())
  name          String
  duration      Int           // Duration in hours
  rewards       DutyReward[]
  centerShifts  CenterShift[]
  attendance    Attendance[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  deletedAt     DateTime?
}

model CenterShift {
  id           Int           @id @default(autoincrement())
  centerId     Int
  shiftId      Int
  center       Center        @relation(fields: [centerId], references: [id])
  shift        Shift         @relation(fields: [shiftId], references: [id])
  schedule     ShiftSchedule[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model Duty {
  id           Int           @id @default(autoincrement())
  name         String
  rewards      DutyReward[]
  amount       Float
  users        User[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model DutyReward {
  id           Int           @id @default(autoincrement())
  dutyId       Int
  shiftId      Int
  amount       Float
  isPaid       Boolean       @default(false)
  date         DateTime      @default(now())
  duty         Duty          @relation(fields: [dutyId], references: [id])
  shift        Shift         @relation(fields: [shiftId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model Attendance {
  id           Int           @id @default(autoincrement())
  userId       Int
  centerId     Int
  shiftId      Int
  date         DateTime
  user         User          @relation(fields: [userId], references: [id])
  center       Center        @relation(fields: [centerId], references: [id])
  shift        Shift         @relation(fields: [shiftId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model ShiftSchedule {
  id           Int           @id @default(autoincrement())
  centerShiftId Int
  date         DateTime
  shiftType    ShiftType
  centerShift  CenterShift   @relation(fields: [centerShiftId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

model Calendar {
  id           Int           @id @default(autoincrement())
  date         DateTime
  examType     ExamType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  deletedAt    DateTime?
}

enum Gender {
  MALE
  FEMALE
}

enum ShiftType {
  HOURS_3
  HOURS_5
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CENTER
  FINANCIAL_AUDITOR
}

enum ExamType {
  TEACHER
  GRADUATE
}

enum AccountStatus {
  PENDING
  UNCOMPLETED
  APPROVED
  REJECTED
}